title: Emacs settings
---
pub_date: 2016-05-23 00:00
---
author: 
---
category: Tutorial
---
tags: emacs, cpp
---
summary: My Aquamacs settings.
---
body:

There are some modes I used to turn my emacs into a powerful IDE environment for c++, python and latex editing. So I post it here to share with anyone who might have interest in using emacs as main editor.


<img src="emacs-cpp-editing-1024x640.png" alt="drawing" width="100%"/>



In my OS X, I have installed those packages and Lisp scripts including, <a href="https://melpa.org/" target="_blank">MELPA package manager</a>, <a href="https://www.gnu.org/software/auctex/" target="_blank">AUCTeX</a>, <a href="https://gist.github.com/soonhokong/7c2bf6e8b72dbc71c93b" target="_blank">irony-mode</a>, <a href="http://company-mode.github.io" target="_blank">company-mode</a>, <a href="https://github.com/nschum/highlight-symbol.el" target="_blank">highlight-symbol</a>, <a href="http://www.flycheck.org/en/latest/" target="_blank">flycheck</a>, <a href="https://github.com/hotpxl/company-irony-c-headers" target="_blank">company-irony-c-header</a>, <a href="http://auto-complete.org" target="_blank">auto-complete</a>, <a href="https://github.com/vspinu/ac-math" target="_blank">ac-math</a>, <a href="https://github.com/joaotavora/yasnippet" target="_blank">Yasnippet</a>, <a href="https://www.emacswiki.org/emacs/NeoTree" target="_blank">Neo Tree</a>, 
<a href="https://melpa.org/#/company-auctex" target="_blank">company-auctex</a>, <a href="https://github.com/leoliu/ggtags" target="_blank">ggtags</a>, <a href="https://github.com/redguardtoo/cpputils-cmake" target="_blank">cpputils-camke</a>, <a href="https://github.com/proofit404/pyenv-mode" target="_blank">pyenv-mode</a>, <a href="https://github.com/proofit404/anaconda-mode" target="_blank">anaconda-mode</a>, <a href="https://www.languagetool.org" target="_blank">languagetool</a>

For more information about c++ IDE environment settings please see <a href="http://tuhdo.github.io/c-ide.html" target="_blank">this</a> amazing introduction. 

<strong>Here is my emacs/aquamacs setting file:</strong>


``` lisp

;; This is the Aquamacs Preferences file.
;; Add Emacs-Lisp code here that should be executed whenever
;; you start Aquamacs Emacs. If errors occur, Aquamacs will stop
;; evaluating this file and print errors in the *Messags* buffer.
;; Use this file in place of ~/.emacs (which is loaded as well.)


;; (package-initialize)
;; (load-theme &#039;tsdh-dark t)

;; MELPA package
(require &#039;package)
(add-to-list &#039;package-archives
             &#039;(&quot;melpa&quot; . &quot;https://melpa.org/packages/&quot;))
(when (&lt; emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list &#039;package-archives &#039;(&quot;gnu&quot; . &quot;http://elpa.gnu.org/packages/&quot;)))
(package-initialize) 


(load-theme &#039;tsdh-dark t) ;; load theme

;; maybe these two lines can be removed later. 
(setq initial-frame-alist &#039;((left . 50)  ))
(smart-frame-positioning-mode nil)

(ac-config-default) ;; load auto-complete

;; latex
;; (setq TeX-auto-save t)
;; (setq TeX-parse-self t)
;; (setq-default TeX-master nil)

(add-hook &#039;LaTeX-mode-hook &#039;visual-line-mode)
(add-hook &#039;LaTeX-mode-hook &#039;flyspell-mode)
(add-hook &#039;LaTeX-mode-hook &#039;LaTeX-math-mode)

(add-hook &#039;LaTeX-mode-hook &#039;turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)


;; irony-mode 
(add-hook &#039;c++-mode-hook &#039;irony-mode)
(add-hook &#039;c-mode-hook &#039;irony-mode)
(add-hook &#039;objc-mode-hook &#039;irony-mode)

;; replace the `completion-at-point&#039; and `complete-symbol&#039; bindings in
;; irony-mode&#039;s buffers by irony-mode&#039;s function
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    &#039;irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    &#039;irony-completion-at-point-async))
(add-hook &#039;irony-mode-hook &#039;my-irony-mode-hook)
(add-hook &#039;irony-mode-hook &#039;irony-cdb-autosetup-compile-options)


;; company
;;(add-hook &#039;after-init-hook &#039;global-company-mode) ;; disable company to work in all case 
(add-hook &#039;c++-mode-hook &#039;global-company-mode) ;; to prevent python has weird autocomplete.
(add-hook &#039;c-mode-hook &#039;global-company-mode)   ;; added to enable c++ and c mode 
(eval-after-load &#039;company
  &#039;(add-to-list &#039;company-backends &#039;company-irony))


;; highlight symbols
(require &#039;highlight-symbol)
(global-set-key [(control f3)] &#039;highlight-symbol)
(global-set-key [f3] &#039;highlight-symbol-next)
(global-set-key [(shift f3)] &#039;highlight-symbol-prev)
(global-set-key [(meta f3)] &#039;highlight-symbol-query-replace)


;; flycheck
(global-flycheck-mode)


;; company-irony-c-headers
(require &#039;company-irony-c-headers)
;; Load with `irony-mode` as a grouped backend
(eval-after-load &#039;company
  &#039;(add-to-list
    &#039;company-backends &#039;(company-irony-c-headers company-irony)))


;; auto-complete &amp; ac-math
(require &#039;package)
(package-initialize)

(require &#039;auto-complete)
(require &#039;auto-complete-config)
(ac-config-default)

(require &#039;ac-math) 
(add-to-list &#039;ac-modes &#039;latex-mode)   ; make auto-complete aware of `latex-mode`

(defun ac-LaTeX-mode-setup () ; add ac-sources to default ac-sources
  (setq ac-sources
	(append &#039;(ac-source-math-unicode ac-source-math-latex ac-source-latex-commands)
		ac-sources))
  )
(add-hook &#039;LaTeX-mode-hook &#039;ac-LaTeX-mode-setup)
(global-auto-complete-mode t)

(setq ac-math-unicode-in-math-p t)


;; start yasnippet
(require &#039;yasnippet)
(yas-global-mode 1)


;; neotree
(add-to-list &#039;load-path &quot;/some/path/neotree&quot;)
(require &#039;neotree)
(global-set-key [f8] &#039;neotree-toggle)



;; company auctex
(company-auctex-init)


;; namespace c++ indent
;; telling .h file is using c++ mode
(add-to-list &#039;auto-mode-alist &#039;(&quot;\\.h\\&#039;&quot; . c++-mode))
;; indenting c++ mode
(defun my-c-setup ()
  (c-set-offset &#039;innamespace [0]))
(add-hook &#039;c++-mode-hook &#039;my-c-setup)


;; Projectile
(projectile-global-mode)




;; ggtags
(require &#039;ggtags)
(add-hook &#039;c-mode-common-hook
          (lambda ()
            (when (derived-mode-p &#039;c-mode &#039;c++-mode &#039;java-mode &#039;asm-mode)
              (ggtags-mode 1))))

(define-key ggtags-mode-map (kbd &quot;C-c g s&quot;) &#039;ggtags-find-other-symbol)
(define-key ggtags-mode-map (kbd &quot;C-c g h&quot;) &#039;ggtags-view-tag-history)
(define-key ggtags-mode-map (kbd &quot;C-c g r&quot;) &#039;ggtags-find-reference)
(define-key ggtags-mode-map (kbd &quot;C-c g f&quot;) &#039;ggtags-find-file)
(define-key ggtags-mode-map (kbd &quot;C-c g c&quot;) &#039;ggtags-create-tags)
(define-key ggtags-mode-map (kbd &quot;C-c g u&quot;) &#039;ggtags-update-tags)
(define-key ggtags-mode-map (kbd &quot;M-,&quot;) &#039;pop-tag-mark)




;; semantic
(semantic-load-enable-primary-exuberent-ctags-support)

;; define c++ file extension types
(defvar c-files-regex &quot;.*\\.\\(c\\|cpp\\|h\\|hpp\\)&quot;
  &quot;A regular expression to match any c/c++ related files under a directory&quot;)

(defun my-semantic-parse-dir-v2 (root regex)
  &quot;
   This function is an attempt of mine to force semantic to
   parse all source files under a root directory. Arguments:
   -- root: The full path to the root directory
   -- regex: A regular expression against which to match all files in the directory
  &quot;
  (let (
        ;;make sure that root has a trailing slash and is a dir
        (root (file-name-as-directory root))
        (files (directory-files root t ))
	)
    ;; remove current dir and parent dir from list
    (setq files (delete (format &quot;%s.&quot; root) files))
    (setq files (delete (format &quot;%s..&quot; root) files))
    ;; remove any known version control directories 
    (setq files (delete (format &quot;%s.git&quot; root) files))
    (setq files (delete (format &quot;%s.hg&quot; root) files))
    (while files
      (setq file (pop files))
      (if (not(file-accessible-directory-p file))
          ;;if it&#039;s a file that matches the regex we seek
          (progn (when (string-match-p regex file)
		   ;; get if buffer is open or open it if it&#039;s not
		   (setq buff (get-file-buffer file))
		   (setq opened-buffer nil)
		   (when (not buff)
		     (progn 
		       (setq opened-buffer t)
		       (setq buff (find-file-noselect file))
		       ))
		   (switch-to-buffer buff)
		   ;; parse the buffer with semantic
		   (semantic-fetch-tags)
		   ;; if we opened the buffer cleanup before proceeding
		   (when opened-buffer
		     (kill-buffer (buffer-name))
		     )
		   ))
	;;else if it&#039;s a directory
	(my-semantic-parse-dir file regex)
	)
      )
    )
  )

(defun my-semantic-parse-current-dir (regex)
  &quot;
   Parses all files under the current directory matching regex
  &quot;
  (my-semantic-parse-dir (file-name-directory(buffer-file-name)) regex)
  )

(defun lk-parse-curdir-c ()
  &quot;
   Parses all the c/c++ related files under the current directory
   and inputs their data into semantic
  &quot;
  (interactive)
  (my-semantic-parse-current-dir c-files-regex)
  )

(defun lk-parse-dir-c (dir)
  &quot;Prompts the user for a directory and parses all c/c++ related files
   under the directory
  &quot;
  (interactive (list (read-directory-name &quot;Provide the directory to search in:&quot;)))
  (my-semantic-parse-dir (expand-file-name dri) c-files-regex)
  )

(provide &#039;lk-file-search)
;; to here 



;; cpputils-camke
(add-hook &#039;c-mode-common-hook
          (lambda ()
            (if (derived-mode-p &#039;c-mode &#039;c++-mode)
                (cppcm-reload-all)
              )))
;; OPTIONAL, somebody reported that they can use this package with Fortran
(add-hook &#039;c90-mode-hook (lambda () (cppcm-reload-all)))
;; OPTIONAL, avoid typing full path when starting gdb
(global-set-key (kbd &quot;C-c C-g&quot;)
		&#039;(lambda ()(interactive) (gud-gdb (concat &quot;gdb --fullname &quot; (cppcm-get-exe-path-current-buffer)))))
;; OPTIONAL, some users need specify extra flags forwarded to compiler
(setq cppcm-extra-preprocss-flags-from-user &#039;(&quot;-I/usr/src/linux/include&quot; &quot;-DNDEBUG&quot;))



;; indent
(setq-default c-basic-offset 4)



;;==============================================================
;; python mode 

;;pyenv-mode
(require &#039;pyenv-mode)
(defun projectile-pyenv-mode-set ()
  &quot;Set pyenv version matching project name.&quot;
  (let ((project (projectile-project-name)))
    (if (member project (pyenv-mode-versions))
        (pyenv-mode-set project)
      (pyenv-mode-unset))))

(add-hook &#039;projectile-switch-project-hook &#039;projectile-pyenv-mode-set)



;; Anaconda mode
(add-hook &#039;python-mode-hook &#039;anaconda-mode)



;; language tool
(require &#039;langtool)
(setq langtool-language-tool-jar &quot; /my/path/to/languagetool-commandline.jar&quot;
	  langtool-mother-tongue &quot;zh&quot;
      langtool-disabled-rules &#039;(&quot;WHITESPACE_RULE&quot;
                                &quot;EN_UNPAIRED_BRACKETS&quot;
                                &quot;COMMA_PARENTHESIS_WHITESPACE&quot;
                                &quot;EN_QUOTES&quot;))</pre>

```

---
